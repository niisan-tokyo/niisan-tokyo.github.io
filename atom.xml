<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[東京23]]></title>
  <subtitle><![CDATA[徒然エンジニアリング]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://niisan-tokyo.github.io/"/>
  <updated>2015-10-17T01:16:20.982Z</updated>
  <id>http://niisan-tokyo.github.io/</id>
  
  <author>
    <name><![CDATA[niisan-tokyo]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Dockerで遊ぶ]]></title>
    <link href="http://niisan-tokyo.github.io/2015/09/05/atomic-host2/"/>
    <id>http://niisan-tokyo.github.io/2015/09/05/atomic-host2/</id>
    <published>2015-09-05T01:15:55.000Z</published>
    <updated>2015-09-05T14:28:32.000Z</updated>
    <content type="html"><![CDATA[<p>ハロー、みんな！<br>niisan-tokyoだゾ！</p>
<p>Dockerのネタ書いてたんだけど、ちょっと長くなっちゃってね。。。<br>まあ、前回の続きだと思ってくれよ！</p>
<p>それで、まあ、何ができるのかをちょっと調べていたんだけど、これがなかなか多い上に、概念の理解に時間がかかってしまってね、、、<br>そんな感じに言い訳をしつつ、コンテナ作って遊んでみようってことを考えたんだ！<br>暇があったら読んでいってくれよな！</p>
<h2 id="Atomic_Host">Atomic Host</h2>
<p>さて、前回dockerをmac上で直接動かしてみたわけだけど、これって実は、裏で軽量のvirtural boxマシンが立ち上がって、その仮想マシン上でdockerを操作している、ってのは説明したと思うんだ<br>で、それって、なんだかわかりにくいんだよな<br>挙動に不満があるとかじゃないんだけど、やっぱり動作環境をなるべく手元においておきたいってのは、心理だと思うんだ</p>
<p>そこで今回は、説明だけ簡単にした、Atomic Hostを使ってみようと思うんだ！</p>
<p>で、導入なんだけど、超簡単なんだ！<br>公式にVagrantパッケージが用意されているから、それを使ってやれば良くて、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vagrant init centos/atomic-host</div><div class="line">vagrant <span class="keyword">up</span> --provider virtualbox</div></pre></td></tr></table></figure>

<p>これで終わりさ！<br>難しいなんて言わせないぜ！</p>
<p>ま、まあ、プライベートIPとか設定するためにVagrantfile をいじるかもしれないが、そんなのは些細な事さ！<br>さあ、これでAtomic Host を導入できたわけだし、楽しきdocker lifeを始めようじゃないか！</p>
<h3 id="。。。あれ？ディレクトリ共有は？">。。。あれ？ディレクトリ共有は？</h3>
<p>え？仮想マシン上に<code>/vagrant</code> ディレクトリがないって？<br>Ah… これにはAtomic Hostの性質が関わってきているんだ。</p>
<p>さて、通常vagrantを使用した際にホストの<code>Vagrantfile</code>のあるディレクトリとゲストの<code>/vagrant</code> ディレクトリが共有されると思うんだけど、あれって、Virtual Box のshared folder っていう機能を使っているんだ<br>で、この機能を使うには、ホストとゲストの双方にVirtural Boxがインストールされていないといけない</p>
<p>結論から行ってしまうと、Atomic Host にVirtural Box はないし、入れられない！<br>そりゃそうだ、dockerにコアを提供することが本来の仕事なんだから、余計なもの入れていたずらにサイズを重くする必要もないからね！<br>じゃあ、どうするのかって？心配はいらない<br>こんなこともあろうかと、Vagrantにはディレクトリ共有の仕組みが複数存在しているんだ</p>
<h3 id="vagrant_rsync">vagrant rsync</h3>
<p>shared folderが使えない場合は、だいたいrsyncによる共有が行われる<br>共有と行っても、ホストからゲストへの一方通行だ<br>仮想環境で作られた成果は共有されないってこと<br>でも、これは当然といえば当然なんだよな。。。<br>この設定になっている場合、仮想マシン上でホームディレクトリ上に<code>sync</code>というディレクトリができているはずで、こいつがこの場合の共有ディレクトリだ<br>中を覗くと、確かに<code>Vagrantfile</code>が存在するのを確認できるだろう</p>
<p>前置きが長くなってしまったが、これでようやくAtomic Hostを使えるというものだね<br>とにかく、ホストマシンで開発なりアップロードするファイルを生成し、ゲスト上のコンテナにデプロイし、挙動を観察する<br>これがdockerを使用したやりかただ！</p>
<h2 id="Docker_で_ubuntu_を動かそう">Docker で ubuntu を動かそう</h2>
<p>さて、dockerの出番だ<br>今回は共有ディレクトリを活用せず、適当にコンテナ作って遊んでみようと思うんだ</p>
<p>とりあえず仮想マシンに入ったら、dockerでコンテナを動かしてみよう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker <span class="command">run</span> -<span class="keyword">it</span> <span class="comment">--rm ubuntu</span></div></pre></td></tr></table></figure>

<p>こんなんで、ubuntuの最新のバージョンの環境が立ち上がるんだ<br>実はコンテナの元になるイメージを持っていなくても、自動的に公式リポジトリを見に行き、イメージを取得する、なんて機能もある<br>だから、公式のイメージが有るのならば、<code>docker pull</code>する必要がないってことだ</p>
<p>それでまあ、一応コマンドのオプションの意味だけど</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="title">i</span>  : interactive のことで、コンテナを直接操作する</div><div class="line">t  : ttyのことらしいけど、niisanにはよくわからん。。。端末を確保してssh接続での操作を出力できるようにするとか？</div><div class="line">rm : コンテナ終了時に、コンテナを削除する</div></pre></td></tr></table></figure>

<p>で、このコマンドを走らせると、シェルが立ち上がるんだ<br>後は適当に使ってやるといいんじゃないかな？<br>ほら、apt-getとか・・・</p>
<p>適当に遊んだら<code>exit</code>でシェルを終了しよう<br>すると、コンテナも終了する<br>オプションでコンテナを削除するようにしていないと、このコンテナは残り続けるわけだが。。。</p>
<p>もう一回同じようにコンテナを起動してみよう<br>さっきコンテナで操作した内容がまるで反映されていないってことがわかるだろう<br>そう、こいつがdockerの最大の特徴の一つだ！<br>つまり、起動するたびに、内容がリセットされるってことだ！<br>もちろん、これは単純にdocker runをすると、新しいコンテナが生成され、古いコンテナの内容は残っていないってことなんだけど、<br>全く同じ内容の環境をお手軽に再現できるってのが、こいつの面白いところだな！</p>
<p>今回はこんなかんじだ！<br>コンテナを作って色々遊んでみようと思ったけど、Atomic Host の話に終始してしまった感が否めないがな。。。<br>次こそはdockerを活用してみるぞ！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ハロー、みんな！<br>niisan-tokyoだゾ！</p>
<p>Dockerのネタ書いてたんだけど、ちょっと長くなっちゃってね。。。<br>まあ、前回の続きだと思ってくれよ！</p>
<p>それで、まあ、何ができるのかをちょっと調べていたんだけど、これがなかなか多い上]]>
    </summary>
    
      <category term="docker" scheme="http://niisan-tokyo.github.io/tags/docker/"/>
    
      <category term="atomic host" scheme="http://niisan-tokyo.github.io/tags/atomic-host/"/>
    
      <category term="変なテンション" scheme="http://niisan-tokyo.github.io/tags/%E5%A4%89%E3%81%AA%E3%83%86%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[はやりのDockerに乗っかる]]></title>
    <link href="http://niisan-tokyo.github.io/2015/09/03/atomic-host/"/>
    <id>http://niisan-tokyo.github.io/2015/09/03/atomic-host/</id>
    <published>2015-09-03T12:31:35.000Z</published>
    <updated>2015-09-03T14:07:37.000Z</updated>
    <content type="html"><![CDATA[<p>ハロー、ハロー！<br>niisan-tokyoですよ！<br>今日はおかしなテンションなので、勘弁して下さい！！</p>
<p>みんな、分散環境、やってるかな？<br>分散環境って、並列処理とか思い浮かべるけど、AWSのごとく、機能毎にサーバ分けするってことだったんだな。。。<br>会社の人に聞いて初めて知ったぜ！</p>
<p>まあ、それはいいとして、今や分散環境はデフォルトだ！<br>AWS触ったことありゃ、もう常識みたいなもんだ</p>
<p>いや、しかしだ。。。それ、開発環境はどうなっているよ？</p>
<p>もしかして、<em>All In One</em> になっちゃいないか？</p>
<p>かくいう俺もそうなんだ！<br>いやぁ、だって、面倒じゃないか。。。<br>確かにVagrant 使えば、気軽にサーバ作れるけど、一個一個コンピュータが立ち上がるんだぜ？<br>しかも仮想マシンだから、オーバーヘッドも気になるしな。。。</p>
<p>前置きが長くなったが、そういうわけで仮想マシンじゃない仮想環境を用意しようってことなんだ<br>そいつが今流行のDockerだ！</p>
<h2 id="Docker">Docker</h2>
<p>Docker ってのは、コンテナ技術って言われるけど何なんだって思うよな？<br>語弊を恐れず簡単に行ってしまうと、コンテナってのは、ホストマシンのOSのコアと、ライブラリの一部を借りて、アプリケーションとライブラリを動作させているものだ！<br>仮想マシンと違って、各々の環境が自前のコアを用意する必要がない分、立ち上げも早いし、サイズも省スペースだ！<br>ただ、OSのコアというかカーネルが、ホストのものに縛られてしまうんだ。<br>そして、Dockerは基本的にLinuxでしか動かないので、コンテナも当然Linux環境となる</p>
<p>まあ、いいじゃないか！<br>ここを見ている人は、だいたいLinux触ってるんだろうし。。。</p>
<p>そんなわけで、ここからはLinuxのコンテナ作る話に限定するぞ！</p>
<h2 id="Boot2Docker">Boot2Docker</h2>
<p>ところで、niisan-tokyoのメイン開発マシンはMacなんだ<br>あれ？じゃあ、Docker使えないじゃん！</p>
<p>なんてことはなく、やりようは色いろあるんだ<br>代表的なのは<strong>boot2docker</strong>を使うことだな！<br><a href="http://boot2docker.io/" target="_blank" rel="external">boot2docker</a></p>
<p>こいつはDockerをMacやWindowsで使えるようにしてくれる・・・というより、コマンドをエミュレートしてくれるって行ったほうが正確かもな<br>詳しい挙動はというと、一旦Virtural Boxでサイズの小さい仮想マシンを構築し、その仮想マシンに対して、dockerコマンドを投げる、という動きになる<br>お手軽にDockerを使いたいんならこれだな</p>
<p>ただ、見えないだけで、仮想マシンが動作している上、ファイルの共有あたりがちょいとわかりにくくなってしまっている</p>
<h2 id="Project_Atomic">Project Atomic</h2>
<p>Dockerを使う方法はもうひとつある<br>要するにDockerを使うための仮想マシンを用意しちゃえばいいのだ<br>仮想マシン５個も６個も立てるくらいなら、仮想マシン一つでアプリ全部コンテナで動かしたほうが、効率がいいてものさ！</p>
<p>boot2dockerと違って、こいつは明確に仮想マシンを構築するので、それなりに制御もしやすいだろう<br>もちろん、明示的に仮想環境を建てなければならないし、そこにSSHで指示を与えなきゃならないので、まあ、少し面倒かもな<br>とはいえ、本格的にDockerをやろうって時にはいいんじゃないかと思うぞ</p>
<p>で、そんな軽量のOS群の中でもniisanが注目しているのが、Project Atomic だ！<br><a href="http://www.projectatomic.io/" target="_blank" rel="external">Project Atomic</a></p>
<p>こいつはRed Hatが主導で進めるプロジェクトで、マシン自体は最小限のコア機能だけ用意し、アプリの機能を各コンテナに持たせるって思想で作られるLinux ディストリビューションのことなんだ<br>既にRed Hat, CentOS, FedoraのAtomic Hostが作成されている<br>CentOSのAtomic Hostに関してはVagrantイメージも用意されているので、使ってみるといいだろう</p>
<h2 id="Dockerを使ってみる">Dockerを使ってみる</h2>
<p>ってなわけで、とりあえずDockerを使ってみる<br>お試し感覚なんで、Boot2dockerを使ってみよう<br>事前にVirtual Boxを入れておこう<br>渡しの場合は既に入ってたので、問題は起こらなかったが。。。<br>とりあえず公式サイトからboot2dockerを入れておいて欲しい<br>んで、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boot2docker <span class="keyword">init</span></div></pre></td></tr></table></figure>

<p>こいつでまず初期化しよう<br>ついで、Dockerを起動しよう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boot2docker <span class="keyword">up</span></div></pre></td></tr></table></figure>

<p>すると、なにか色々出てくるはずだ。<br>で、正常に動作させるにはこんなかんじでやる</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(boot2docker shellinit)</span>"</span></div></pre></td></tr></table></figure>

<p>意味は簡単で、必要な環境変数を設定しているってことなんだ<br>では、いつもの様にHello Worldで締めくくってみよう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">docker</span> run hello-world</div></pre></td></tr></table></figure>

<p>正常に動作すれば成功だ！</p>
<p>こんなかんじで、Dockerを勉強していくといいね！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>ハロー、ハロー！<br>niisan-tokyoですよ！<br>今日はおかしなテンションなので、勘弁して下さい！！</p>
<p>みんな、分散環境、やってるかな？<br>分散環境って、並列処理とか思い浮かべるけど、AWSのごとく、機能毎にサーバ分けするってことだったんだな。]]>
    </summary>
    
      <category term="docker" scheme="http://niisan-tokyo.github.io/tags/docker/"/>
    
      <category term="vagrant" scheme="http://niisan-tokyo.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ALMiniumでいれたJenkinsにハマった件]]></title>
    <link href="http://niisan-tokyo.github.io/2015/02/23/jenkins-apache/"/>
    <id>http://niisan-tokyo.github.io/2015/02/23/jenkins-apache/</id>
    <published>2015-02-23T14:17:57.000Z</published>
    <updated>2015-02-23T15:11:06.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちは皆さん<br>niisan-tokyoです。</p>
<p>Jenkinsの謎挙動と戦っていたのですが、ようやく解決しましたので、せっかくだから公開してみようと思うのです<br>よくありそうなパターンなのに、どこにもないんだもん・・・</p>
<p>備忘録代わりに長文になってしまっています。<br>面倒臭かったら、最後の方だけ見ちゃってください</p>
<h2 id="ALMinium">ALMinium</h2>
<p>まず前提として、私はALMiniumというプロジェクト管理ツールを利用させて頂いております<br>メジャーなチケット管理ツールのRedmineをお手軽にコマンド一発で導入できる便利なツールで、何度もお世話になっております</p>
<p>何がいいって、これ、Jenkinsまで導入してくれるんですよ！<br>自宅でローカルな開発環境にALMiniumぶち込んで、Jenkins立ててお気軽CIなんて、ごきげんだと思いませんか？<br>PHPerの私は、phingあたりのビルドツールを入れて、タスクを作っておき、定期的にJenkinsさんにビルドしてもらってます</p>
<h3 id="Jenkinsの構成">Jenkinsの構成</h3>
<p>あとで重要となりますので、ALMinium下でのJenkinsの構成を見ておきます。<br>まずWebサーバはapacheを使用しています。<br>Location設定により、/jenkins というURLが来た場合、プロキシ、及びリバースプロキシにJenkinsを設定し、処理を移譲するようになっています。<br>つまり、ユーザーはJenkinsに直接アクセスするわけではなく、一旦apacheを経由してから、Jenkinsにアクセスするのです</p>
<h2 id="問題との邂逅">問題との邂逅</h2>
<p>さて、今のプロジェクトでも早速Jenkinsを突っ込んでみました。<br>ところが、プラグインの管理や、設定登録後のリダイレクトに何故か表示が失敗するケースが多発。<br>よく見てみると、URLがおかしくなっていました</p>
<h3 id="https_から_http_にいつの間にか変化している">https から http にいつの間にか変化している</h3>
<p>実は、自宅ではローカル環境でしかALMiniumに繋がないため、SSLを使用していなかったのです。<br>しかし、今回のプロジェクトではそうも行かないので、ALMinium導入時にSSLの設定を追加したのです。<br>すると、Jenkinsの特定のページにアクセスしようとすると、URLが何故かhttpsからhttpになってしまい、アクセスできなくなってしまうのです。</p>
<h2 id="解決編">解決編</h2>
<p>よく調べてみると、どうもURLの末尾に「/」の入っていないリンクを踏むと、URLが変わってしまうらしい。<br>また、開発ツールを使用すると、リンク押下後のタイムラインで、一度httpsのページにアクセスしたあと、httpのページにリダイレクトしていることが判明しました。</p>
<h3 id="原因1：mod_dir">原因1：mod_dir</h3>
<p>スラッシュのあるなしによるリダイレクトの挙動は、mod_dirが原因です。<br>詳細は省きますが、スラッシュが入っていないURLが来ると、その末尾の文字列がディレクトリを表していると判断した場合、末尾にスラッシュを付与したURLにリダイレクトするという仕様のようです。<br>そういうめんどくさい仕様のため、URLの末尾にスラッシュ「/」がないURLを踏むと、リダイレクトし、問題が発生してしまうということがわかりました。</p>
<h3 id="原因2：プロキシ">原因2：プロキシ</h3>
<p>ただリダイレクトするだけであれば問題はないのですが、どういうわけだかスキーマがhttpsからhttpに変わってしまっています<br>この原因は実は私自身も良くわかっていませんが、どうやらプロキシにあるようです。<br>先に述べたように、一旦apacheが受け取ったリクエストは、プロキシという形でJenkinsに処理が移譲されます<br>Jenkinsへの設定を規定す<code>conf.d/jenkins.conf</code>を覗いてみると、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ProxyPass         http:<span class="comment">//localhost:8081/jenkins</span></div><div class="line">ProxyPassReverse  http:<span class="comment">//localhost:8081/jenkins</span></div></pre></td></tr></table></figure>

<p>となっています。<br>Jenkinsへアクセスするとき、そして戻ってくるときのURLがともにhttpスキーマであることが、そもそもの原因のようです。<br>つまり、Jenkinsに処理を移譲して何らかのデータが返却されると、どういうわけかJenkinsへつなぐ際のスキーマに変更されているようです。</p>
<h3 id="解決法：リクエストヘッダーに、httpsであることを明記">解決法：リクエストヘッダーに、httpsであることを明記</h3>
<p>というわけで、解決法としては変更されているスキーマをhttpからhttpsに戻してやれば良いということがわかります。<br>そのためには<code>conf.d/jenkins.conf</code>で</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RequestHeader <span class="keyword">set</span> X-Forwarded-Proto <span class="string">"https"</span></div><div class="line">RequestHeader <span class="keyword">set</span> X-Forwarded-Port <span class="string">"443"</span></div></pre></td></tr></table></figure>

<p>を突っ込んでやればよいです。</p>
<p>と、今回はこんなかんじです。<br>皆様のご参考になれば幸いです。<br>それでは皆様、よい開発を！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちは皆さん<br>niisan-tokyoです。</p>
<p>Jenkinsの謎挙動と戦っていたのですが、ようやく解決しましたので、せっかくだから公開してみようと思うのです<br>よくありそうなパターンなのに、どこにもないんだもん・・・</p>
<p>備忘録代わりに]]>
    </summary>
    
      <category term="jenkins" scheme="http://niisan-tokyo.github.io/tags/jenkins/"/>
    
      <category term="apache" scheme="http://niisan-tokyo.github.io/tags/apache/"/>
    
      <category term="alminium" scheme="http://niisan-tokyo.github.io/tags/alminium/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Github pages を使って静的サイト作成]]></title>
    <link href="http://niisan-tokyo.github.io/2015/01/26/githubpage/"/>
    <id>http://niisan-tokyo.github.io/2015/01/26/githubpage/</id>
    <published>2015-01-26T09:30:01.000Z</published>
    <updated>2015-01-29T11:54:16.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちはみなさん。<br>niisan-tokyoでございます。</p>
<p>前回の記事で、HEXOを使って容易に静的サイトを作ることができることがわかりました。<br>今回の記事では、これを実際にWEB上で公開してみようと思います。<br>ターゲットとするホスティングサービスとしては、無料で使えるGithub pages にしようと思います。<br>まあ、このサイトがGitHubPages上にあるんで、それが理由だったりするんですが…</p>
<h2 id="GitHubPages">GitHubPages</h2>
<p><a href="https://pages.github.com/" target="_blank" rel="external">GitHubPages</a>というのは、gitを使ってWEBサイトを簡単に作ってしまえるサービスで、ユーザー独自のサイトを作ったり、プロジェクト用のサイトを作ることができます。<br>gitを使って、とあるように、サイトのデプロイをgitを通して行います。</p>
<p>HEXOは、GitHubPagesへのデプロイを支援する機構が備わっており、作成した静的サイトをコマンド一発でWEB上に反映させることができるのです。やったね！<br>他にも多くの静的サイトジェネレータで、同じような機能を支援しているらしく、OctopressやJekyllみたいな有名どころでも、デプロイを簡易化してくれるみたいです。</p>
<h2 id="サイトを作る">サイトを作る</h2>
<h3 id="GitHubPages_用のリポジトリを作る">GitHubPages 用のリポジトリを作る</h3>
<p>さて、早速サイトを作ってしまいましょう。<br>そのためにはまず、GitHubPages用のリポジトリを作る必要があります。<br>githubのアカウントがない場合は、作っておいてくださいな。</p>
<p>アカウントを用意しましたら、早速リポジトリを作ります。<br>ところで、hexoは画像を用意するのが若干億劫なのと、タグとかカテゴリとかで飛ぶと、画像が出ないとかいう問題があるっぽいので、解説用の画像を用意しておりません！<br>なんでこんな言い訳しているかというと、リポジトリの作り方を手取り足取り画像解説を交えて解説できないということです…<br>まあ、開発者なら、こんなもの楽勝ですよ！</p>
<p>さて、リポジトリを作るのですが、その名前を決める必要があります。<br>今回はプロジェクトではなく、個人用のサイトを作ることにしましょう。<br>この場合、リポジトリの名前は以下のようにしなければなりません</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;yourname&gt;.github.<span class="built_in">io</span></div></pre></td></tr></table></figure>

<p><code>&lt;yourname&gt;</code>には、各々のアカウント名を入れてください。<br>私の場合は <code>niisan-tokyo.github.io</code>がリポジトリ名となります。<br>ちょうどこのサイトのドメイン名と同じ名前になっております。<br>とりあえず、リポジトリを作成したので、次の設定に移りましょう。</p>
<h3 id="鍵を登録する">鍵を登録する</h3>
<p>githubにリポジトリをプッシュするためには、鍵を用意しておく必要があります。<br>ここでいう鍵というのは、SSH接続に必要な暗号鍵です。</p>
<h4 id="鍵を作る">鍵を作る</h4>
<p>その鍵はどう用意するんだというと、普通にコマンドで作ることができます。(Windowsは無理よ。)<br>私の場合はVM上で作業しているので、鍵もVMのCentOS上で作ることにします。(VM上であればWindowsでもいけるぜ！)</p>
<p>VM上で以下のようにコマンドを打ち込んで、鍵を作成します</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.ssh/</div><div class="line">ssh-keygen</div></pre></td></tr></table></figure>

<p>これで、鍵ができています。<br><code>~/.ssh/</code>配下で<code>ls</code>コマンドを打ち込むと、鍵ファイルとして、<code>id_rsa</code>, <code>id_rsa.pub</code>という二つのファイルができていると思います。<br>そこで、viとかcatとかでid_rsa.pubの中身を開き、その中身をコピーしましょう。</p>
<h4 id="鍵を登録する-1">鍵を登録する</h4>
<p>現在のバージョンですと、githubのマイページの右上に歯車マークがあるので、こいつをクリックします。<br>すると、個人設定ページに入るので、左のメニューバーからSSH keysとあるので、こいつを押してやります。<br>すると、鍵を設定する画面に入るので、先ほどコピーしたid_rsa.pubの中身を貼り付けてやります。<br>これで鍵の登録は完了です。</p>
<h3 id="HEXOで静的ページをデプロイする">HEXOで静的ページをデプロイする</h3>
<p>なんだかいろいろ面倒でしたが、ここからが本番です。<br>前回の記事でHEXOで静的サイトを作ることを見てきましたが、肝心のサイト生成とかデプロイとかなんにもやってなかったです。</p>
<p>というわけで、HEXOで作った静的ページを、GitHubPagesにデプロイ(アップロード)してみましょう。<br>たいした内容がなくても大丈夫です。<br>やることに意味があるのですよ！</p>
<h4 id="_config-ymlをいじる">_config.ymlをいじる</h4>
<p>早速ですが、前回作成したHEXOのプロジェクトページに入ってみましょう。<br>ファイル群に<code>_config.yml</code>があると思います。<br>こいつが書き方のルールとかデプロイ先の情報とかを設定するものです。<br>プラグインの設定もここでやるので、よく見ておくと良いです。</p>
<p>さて、今回はデプロイすることが目的ですので、最小限の設定をしてみましょう。<br><code>_config.yml</code>の最後尾に以下のような設定を突っ込みます</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="preprocessor"># Deployment</span></div><div class="line"><span class="preprocessor">## Docs: http://hexo.io/docs/deployment.html</span></div><div class="line"><span class="title">deploy</span>:</div><div class="line">  <span class="typedef"><span class="keyword">type</span>: github</span></div><div class="line">  repo: git@github.com:&lt;yourname&gt;/&lt;yourname&gt;.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p>ここで、<code>&lt;yourname&gt;</code>は例によってアカウント名を入れてください。<br>これでとりあえずの設定は終了です。</p>
<h4 id="デプロイする">デプロイする</h4>
<p>最後にデプロイしましょう。<br>せっかくなので、一発でデプロイするコマンドを売って胃しまいましょう。<br><code>_config.yml</code>のあるディレクトリ上で、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hexo</span> deploy -g</div></pre></td></tr></table></figure>

<p>これで終わりです。<br>deployは自動でgitリポジトリを作り、生成した静的htmlをコミットし、最後にgithubにpushすることで、デプロイを完遂します。<br><code>-g</code>オプションは、デプロイする際に、静的サイト生成を行うという意味になります。<br><code>-g</code>をつけない場合は<code>hexo generate</code>コマンドで、一旦静的ページ生成を完遂していなければなりません。</p>
<p>兎にも角にも、これで静的サイト生成は終わりです。<br>早速<code>&lt;yourpage&gt;.github.io</code>にアクセスし、自分の成果を見てみましょう！</p>
<p>さて、今回はこんなところです。<br>それではみなさん、よい開発を！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちはみなさん。<br>niisan-tokyoでございます。</p>
<p>前回の記事で、HEXOを使って容易に静的サイトを作ることができることがわかりました。<br>今回の記事では、これを実際にWEB上で公開してみようと思います。<br>ターゲットとするホスティング]]>
    </summary>
    
      <category term="hexo" scheme="http://niisan-tokyo.github.io/tags/hexo/"/>
    
      <category term="github pages" scheme="http://niisan-tokyo.github.io/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HEXOを使って静的サイト作成]]></title>
    <link href="http://niisan-tokyo.github.io/2015/01/25/2015012502/"/>
    <id>http://niisan-tokyo.github.io/2015/01/25/2015012502/</id>
    <published>2015-01-25T16:00:45.000Z</published>
    <updated>2015-01-25T15:39:46.000Z</updated>
    <content type="html"><![CDATA[<p>こんにちはみなさん<br>niisan-tokyoです</p>
<p>本投稿ではこのサイトを作成するの使用した静的サイトジェネレータをご紹介いたします</p>
<h2 id="HEXO_とは?">HEXO とは?</h2>
<p>まずは、HEXO って何ですかってことなのですが、要するに静的サイトジェネレータです。同じようなものに、rubyのmiddlemanとかありますが、ちょっと挫折しました…</p>
<p><a href="http://hexo.io/" target="_blank" rel="external">HEXO</a></p>
<p>とりあえず <a href="http://liginc.co.jp/web/programming/server/104594" target="_blank" rel="external">この記事</a> を参考にして導入しました</p>
<h2 id="HEXO_の導入">HEXO の導入</h2>
<h3 id="VMを作成する">VMを作成する</h3>
<p>作っておいてなんなんですが、これ無駄な作業だったかもしれません。<br>「環境の統一ガー」とか、「node.jsガー」とか考えていましたが、普通にnode入れても大して問題なかったんじゃないかなぁ、とか思ってしまいました。</p>
<p>やっちゃったものはやっちゃったものなので、とりあえず書き残してみますぜ！<br>なあに、必要なければ飛ばしちゃえばいいのさ！</p>
<h4 id="vagrant_で作る">vagrant で作る</h4>
<p>まあ、VM使った理由は、vagrant で作るんで大して労力使わないからってのもあるんです。<br>vagrant ない人は、適当にググって、入れておくといいと思います。<br>WEB開発ではどうせ必要になりますんで、持っておいて損はないです。</p>
<p>ということで、vagrant あること前提でいきます。<br>私のボックスリストにはCentOSとUbuntuがあるのですが、使い慣れているので、今回はCentOSでいきます。<br>とりあえず適当なディレクトリでVM作ってみます。<br>コマンドラインで以下のように打ち込んでみましょう。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant <span class="keyword">init</span> centos65</div></pre></td></tr></table></figure>

<p>これで作業ディレクトリ上にVagrantfileができたので、そのまま立ち上げてしまえば良いのですが、後々のためにVagrantfileをちょっとだけいじっておきます。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Create a private network, which allows host-only access to the machine</span></div><div class="line"><span class="comment"># using a specific IP.</span></div><div class="line">  config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"192.168.33.10"</span></div></pre></td></tr></table></figure>

<p>プライベートネットワークを設定することで、ホストマシンからIPアドレスでの接続が可能となりました。<br>この状態で、コマンドラインでVMを立ち上げます。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant <span class="keyword">up</span></div></pre></td></tr></table></figure>

<p>これで終わりです。<br>Mac使っていれば、VMが立ち上がった状態で、</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">vagrant</span> ssh</div></pre></td></tr></table></figure>

<p>でVMに入れます。<br>以降はVM内での作業です</p>
<h3 id="node-js_入れる(VM内)">node.js 入れる(VM内)</h3>
<p>HEXOはnode.js のパッケージツールなので、まずはnode.jsをインストールしましょう。<br>なんでも、yumにバンドルされたものがあるらしいんですが、いっつもnvm経由でインストールしていたので、慣れているnvmでインストールしました。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/creationix/nvm.git ~/.nvm</div><div class="line"><span class="keyword">source</span> ~/.nvm/nvm.<span class="keyword">sh</span></div></pre></td></tr></table></figure>

<p>まず、nvmをgithubから引っ張ってきます。<br>次に、nvmを有効化しておきます。</p>
<p>あとは好きなバージョンのnodeを突っ込みましょう。<br>最新の安定版らしい、0.10.26を突っ込んでみます。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nvm <span class="operator"><span class="keyword">install</span> <span class="number">0.10</span><span class="number">.26</span></span></div><div class="line">nvm <span class="keyword">use</span> <span class="number">0.10</span><span class="number">.26</span></div></pre></td></tr></table></figure>

<h3 id="HEXO_導入">HEXO 導入</h3>
<p>ここまでくれば、あとは楽勝です</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="operator"><span class="keyword">install</span> -g hexo</span></div></pre></td></tr></table></figure>

<p>これで、hexoコマンドが使えるようになりました</p>
<p>蛇足ですが、<code>source ~/.nvm/nvm.sh</code>と<code>nvm use 0.10.26</code>は.bash_profileに書いておくと、いちいち打ち込まなくていいので、楽ですな。</p>
<h2 id="HEXOでサイト作成">HEXOでサイト作成</h2>
<h3 id="雛形の作成">雛形の作成</h3>
<p>では、早速作ってみましょう。<br>どこで作ってもいいのですが、サイトのソースはホストから見れるようにしたい！って場合があると思うので、共有ディレクトリである/vagrant に移動して、雛形を作ってみましょう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /vagrant</div><div class="line">hoxe init myblog</div></pre></td></tr></table></figure>

<p>これで雛形作成完了です。<br>さらに、必要なパッケージを入れて、準備完了と相成ります</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> myblog</div><div class="line">npm install</div></pre></td></tr></table></figure>

<p>サイト作成には他にも準備すべきことがありますが、まずは雛形の動作を確認してみましょう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="title">hoxe</span> server -i <span class="number">192.168.33.10</span></div></pre></td></tr></table></figure>

<p>これでVM上の静的サイトにアクセスできるようになったはずです。<br>デフォルトのポートは4000です。<br>IP指定しているのはわざわざVMなんぞ作っちゃったせいですね。<br>ホストマシンに直に作るのであれば、そのままlocalhost:4000 で繋げられます。</p>
<h3 id="記事を書く">記事を書く</h3>
<h4 id="記事を作成する">記事を作成する</h4>
<p>さて、いよいよ記事を書いていきましょう。<br>先ほど作った「myblog」ディレクトリ上で記事作成用のコマンドを打ち込みます。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"&lt;ファイル名&gt;"</span></div></pre></td></tr></table></figure>

<p>すると、source/_post/ 配下に先ほどファイル名指定した記事用のmarkdownファイルが作成されています。<br>こいつを編集していけば、今ここで書かれているような静的ページを作成することができるということです</p>
<h4 id="記事の書き方">記事の書き方</h4>
<p>ファイルは単純なmarkdownではなく、yamlとmarkdownが融合してしまっている形式となっています。<br>ファイルの書き始めは以下のようにyaml形式になっているはずです</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: "hogehoge"</div><div class="line">date: 2015-xx-xx xx:xx:xx</div><div class="line"><span class="header">tags:</span></div><div class="line">---</div></pre></td></tr></table></figure>

<p><code>title</code>はその名の通り記事のタイトルです。<br><code>date</code>は記事を書いた日付を入れましょう。<br><code>tags</code>は記事のタグを表記するものです。<br>タグに関しては複数表記が可能です。<br>表記は以下のようにyaml形式に倣うと良いでしょう</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">tag</span><span class="variable">s:</span> hoge</div></pre></td></tr></table></figure>



<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags:</div><div class="line">-<span class="ruby"> hoge</span></div><div class="line">-<span class="ruby"> age</span></div></pre></td></tr></table></figure>

<p>本文は<code>---</code>以下に、markdown形式で勝ていただければ良いです。</p>
<p>さて、本日はこんなものです。<br>次回はgithub pages との組み合わせを行って、高速デプロイを試していこうと思います。<br>まあ、今まさにやってるんですがね…</p>
<p>それではみなさま、よい開発を!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>こんにちはみなさん<br>niisan-tokyoです</p>
<p>本投稿ではこのサイトを作成するの使用した静的サイトジェネレータをご紹介いたします</p>
<h2 id="HEXO_とは?">HEXO とは?</h2>
<p>まずは、HEXO って何ですかってことなので]]>
    </summary>
    
      <category term="hexo" scheme="http://niisan-tokyo.github.io/tags/hexo/"/>
    
      <category term="vagrant" scheme="http://niisan-tokyo.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[はじめに]]></title>
    <link href="http://niisan-tokyo.github.io/2015/01/25/startBlog/"/>
    <id>http://niisan-tokyo.github.io/2015/01/25/startBlog/</id>
    <published>2015-01-25T15:30:23.000Z</published>
    <updated>2015-01-25T06:48:26.000Z</updated>
    <content type="html"><![CDATA[<p>どうもみなさん、こんにちは<br>niisan-tokyoと申します</p>
<p>ブログ投稿は４年ほど前から書いていなかったのですが、色々あってもう一度やってみようかなと思った次第です(実際はただの静的サイトですが)。</p>
<p>目下、私の中で懸念事項となっているのは、私の勤める会社において、技術共有の術が確立されていないことです。確かに小さい会社ではありますし、現在のSES中心の業務形態では、技術の蓄積が難しいのも致し方ないことです。しかし、「致し方ない」で済ませてしまえば、ゆくゆくは我々の首を絞めることになりはしないでしょうか。</p>
<p>そこで、本サイトをモデルケースとし、いかようにして知識の蓄積をしていくかを考えていこうと思った次第です。次回投稿で、とりあえずこのサイトを作成するためにどのような手段を取っているのかを解説し、その後、複数人での投稿を如何様にするかを考えてみようと思います</p>
<p>本投稿は以上となります<br>みなさま、よい開発を!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>どうもみなさん、こんにちは<br>niisan-tokyoと申します</p>
<p>ブログ投稿は４年ほど前から書いていなかったのですが、色々あってもう一度やってみようかなと思った次第です(実際はただの静的サイトですが)。</p>
<p>目下、私の中で懸念事項となっているのは]]>
    </summary>
    
  </entry>
  
</feed>
